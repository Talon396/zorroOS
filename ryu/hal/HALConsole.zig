const std = @import("std");
const Unifont = @import("HALConsoleFont.zig").Unifont;

pub const FBInfo = struct {
    ptr: *allowzero void = @intToPtr(*allowzero void, 0),
    width: usize = 0,
    height: usize = 0,
    pitch: usize = 0,
    bpp: usize = 0,
    set: *const fn (self: *const FBInfo, x: isize, y: isize, w: usize, h: usize, c: usize) callconv(.C) void,
};

var info: *const FBInfo = undefined;
var cursorX: usize = 0;
var cursorY: usize = 0;

fn fbDrawBitmap(x: isize, y: isize, w: usize, h: usize, bitmap: []u8, color: usize) void {
    var i: usize = 0;
    while (i < h) : (i += 1) {
        var j: usize = 0;
        while (j < (w / 8)) : (j += 1) {
            var b: u8 = bitmap[(i * (w / 8)) + j];
            var c: isize = @intCast(isize, j * 8);
            while (b != 0) : (b <<= 1) {
                if ((b & 0x80) != 0) {
                    info.set(info, x + c, y + @intCast(isize, i), 1, 1, color);
                }
                c += 1;
            }
        }
    }
}

const ryuLogo = [_]u8{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x03, 0xff, 0xfe, 0x00, 0x30, 0x3f, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x38, 0x7f, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x38, 0x7f, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x3c, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00,
    0x00, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf0, 0x00,
    0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf8, 0x00,
    0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x1f, 0xe7, 0xff, 0xff, 0xfc, 0x00,
    0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0x1f, 0xcf, 0xff, 0xff, 0xfe, 0x00,
    0x00, 0x3f, 0xff, 0xff, 0xc0, 0x00, 0x1f, 0xcf, 0xff, 0xff, 0xff, 0x00,
    0x00, 0x7f, 0xff, 0xff, 0xc0, 0x00, 0x1f, 0x9f, 0xff, 0xff, 0xff, 0x00,
    0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xbf, 0xff, 0xff, 0xff, 0x80,
    0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x80,
    0x01, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xc0,
    0x01, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xc0,
    0x01, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xe0,
    0x03, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xe0,
    0x03, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xe0,
    0x07, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xf0,
    0x07, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x7f, 0xf0, 0x07, 0xff, 0xff, 0xf0,
    0x07, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xf0, 0x03, 0xff, 0xff, 0xf0,
    0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x0f, 0xf0, 0x03, 0xff, 0xff, 0xf0,
    0x0f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x03, 0xe0, 0x01, 0xff, 0xff, 0xf8,
    0x0f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xe0, 0x01, 0xff, 0xff, 0xf8,
    0x0f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0xc0, 0x01, 0xff, 0xff, 0xf8,
    0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf8,
    0x1f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf8,
    0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf8,
    0x1f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf8,
    0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xfc,
    0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc,
    0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc,
    0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xff, 0xfc,
    0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xf8,
    0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xf8,
    0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xf8,
    0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
    0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
    0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
    0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
    0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
    0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
    0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
    0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
    0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
    0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
    0x0f, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
    0x07, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
    0x07, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0,
    0x07, 0xff, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0,
    0x03, 0xff, 0xff, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80,
    0x03, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80,
    0x01, 0xff, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80,
    0x01, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
    0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x00,
    0x00, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x00,
    0x00, 0x7f, 0xff, 0xfc, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x00,
    0x00, 0x3f, 0xff, 0xfc, 0x7f, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x00,
    0x00, 0x1f, 0xff, 0xfc, 0x0f, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x00,
    0x00, 0x0f, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xf0, 0x00,
    0x00, 0x0f, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xf0, 0x00,
    0x00, 0x07, 0xf9, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x03, 0xf8, 0xff, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00,
    0x00, 0x01, 0xf8, 0x3f, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
    0x00, 0x00, 0xf8, 0x0f, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x78, 0x01, 0x80, 0x01, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
    0x00, 0x00, 0x30, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const ryuText = [_]u8{
    0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x00, 0x11, 0x00, 0x00, 0x41, 0x00, 0x02,
    0x80, 0x00, 0x11, 0x80, 0x00, 0x41, 0x00, 0x02,
    0x80, 0x00, 0x10, 0x80, 0x00, 0xc1, 0x00, 0x02,
    0x80, 0x00, 0x30, 0xc0, 0x00, 0x81, 0x00, 0x02,
    0x80, 0x00, 0x20, 0x40, 0x01, 0x81, 0x00, 0x02,
    0x80, 0x00, 0x60, 0x60, 0x01, 0x01, 0x00, 0x02,
    0x80, 0x00, 0x40, 0x20, 0x01, 0x01, 0x00, 0x02,
    0x80, 0x00, 0xc0, 0x20, 0x03, 0x01, 0x00, 0x02,
    0x80, 0x03, 0x80, 0x30, 0x02, 0x01, 0x00, 0x02,
    0xff, 0xfe, 0x00, 0x10, 0x06, 0x01, 0x00, 0x02,
    0x80, 0x18, 0x00, 0x18, 0x04, 0x01, 0x00, 0x02,
    0x80, 0x0c, 0x00, 0x08, 0x0c, 0x01, 0x00, 0x02,
    0x80, 0x04, 0x00, 0x0c, 0x08, 0x01, 0x00, 0x02,
    0x80, 0x06, 0x00, 0x04, 0x08, 0x01, 0x00, 0x02,
    0x80, 0x03, 0x00, 0x06, 0x18, 0x01, 0x00, 0x02,
    0x80, 0x01, 0x00, 0x02, 0x10, 0x01, 0x00, 0x06,
    0x80, 0x01, 0x80, 0x03, 0x30, 0x01, 0x80, 0x06,
    0x80, 0x00, 0xc0, 0x01, 0x20, 0x01, 0x80, 0x0a,
    0x80, 0x00, 0x40, 0x01, 0x20, 0x00, 0xc0, 0x1a,
    0x80, 0x00, 0x60, 0x01, 0xc0, 0x00, 0xe0, 0x72,
    0x80, 0x00, 0x20, 0x00, 0xc0, 0x00, 0x71, 0xc1,
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x1f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,
};

pub fn Init(i: *const FBInfo) void {
    info = i;
    cursorX = 0;
    cursorY = 0;
    info.set(info, 0, 0, info.width, info.height - 96, 0x1E1E2E);
    info.set(info, @intCast(isize, cursorX * 8), @intCast(isize, cursorY * 16), 8, 16, 0xCDD6F4);
    var runtime: usize = 0;
    var y = info.height - 96;
    while (y <= info.height) : (y += 1) {
        var x: isize = if ((y % 2) == 1) 1 else 0;
        while (x <= info.width) : (x += 2) {
            info.set(info, x, @intCast(isize, y), 1, 1, 0x1E1E2E);
        }
    }
    fbDrawBitmap(@divTrunc(@intCast(isize, info.width), 2) - 84, @intCast(isize, info.height) - 96, 96, 24, @constCast(ryuLogo[runtime..ryuLogo.len]), 0xB57BEE);
    fbDrawBitmap(@divTrunc(@intCast(isize, info.width), 2) - 84, @intCast(isize, info.height) - 72, 96, 24, @constCast(ryuLogo[runtime + (12 * 24) .. ryuLogo.len]), 0x8B61C1);
    fbDrawBitmap(@divTrunc(@intCast(isize, info.width), 2) - 84, @intCast(isize, info.height) - 48, 96, 24, @constCast(ryuLogo[runtime + (24 * 24) .. ryuLogo.len]), 0x624795);
    fbDrawBitmap(@divTrunc(@intCast(isize, info.width), 2) - 84, @intCast(isize, info.height) - 24, 96, 24, @constCast(ryuLogo[runtime + (36 * 24) .. ryuLogo.len]), 0x392D69);
    fbDrawBitmap(@divTrunc(@intCast(isize, info.width), 2) + 20, @intCast(isize, info.height - 66), 64, 37, @constCast(ryuText[runtime..ryuText.len]), 0xffffff);
    Put("Ryu Kernel Version 0.0.1 (c) 2020-2023 TalonFox\n", .{});
}

fn newline() void {
    cursorX = 0;
    if (((cursorY + 1) * 16) >= (info.height - 96)) {
        // Scroll
        var i: usize = 16;
        while (i < (info.height - 96)) : (i += 1) {
            std.mem.copy(
                u8,
                @intToPtr([*]u8, @ptrToInt(info.ptr) + ((i - 16) * info.pitch))[0..info.pitch],
                @intToPtr([*]const u8, @ptrToInt(info.ptr) + (i * info.pitch))[0..info.pitch],
            );
        }
    } else {
        cursorY += 1;
    }
}

fn conWriteString(_: @TypeOf(.{}), string: []const u8) error{}!usize {
    for (0..string.len) |i| {
        const c = string[i];
        info.set(info, @intCast(isize, cursorX * 8), @intCast(isize, cursorY * 16), 8, 16, 0x1E1E2E);
        if (c == '\n') {
            newline();
        } else {
            fbDrawBitmap(@intCast(isize, cursorX * 8), @intCast(isize, cursorY * 16), 8, 16, @constCast(Unifont[((@intCast(usize, c) - 0x20) * 16)..Unifont.len]), 0xcdd6f4);
            cursorX += 1;
            if ((cursorX * 8) >= info.width) {
                newline();
            }
        }
        info.set(info, @intCast(isize, cursorX * 8), @intCast(isize, cursorY * 16), 8, 16, 0xCDD6F4);
    }
    return string.len;
}

const Writer = std.io.Writer(@TypeOf(.{}), error{}, conWriteString);
const writer = Writer{ .context = .{} };

pub fn Put(comptime format: []const u8, args: anytype) void {
    try writer.print(format, args);
}

pub fn EnableDisable(en: bool) void {
    _ = en;
}
