const limine = @import("limine");
const std = @import("std");
const HAL = @import("../HAL.zig");

export var fb_request: limine.FramebufferRequest = .{};

const colorLookupTable: [256]u32 = [256]u32{
    0x000000,
    0x000040,
    0x000080,
    0x0000c0,
    0x0000ff,
    0x002400,
    0x002440,
    0x002480,
    0x0024c0,
    0x0024ff,
    0x004900,
    0x004940,
    0x004980,
    0x0049c0,
    0x0049ff,
    0x006d00,
    0x006d40,
    0x006d80,
    0x006dc0,
    0x006dff,
    0x009200,
    0x009240,
    0x009280,
    0x0092c0,
    0x0092ff,
    0x00b600,
    0x00b640,
    0x00b680,
    0x00b6c0,
    0x00b6ff,
    0x00db00,
    0x00db40,
    0x00db80,
    0x00dbc0,
    0x00dbff,
    0x00ff00,
    0x00ff40,
    0x00ff80,
    0x00ffc0,
    0x00ffff,
    0x330000,
    0x330040,
    0x330080,
    0x3300c0,
    0x3300ff,
    0x332400,
    0x332440,
    0x332480,
    0x3324c0,
    0x3324ff,
    0x334900,
    0x334940,
    0x334980,
    0x3349c0,
    0x3349ff,
    0x336d00,
    0x336d40,
    0x336d80,
    0x336dc0,
    0x336dff,
    0x339200,
    0x339240,
    0x339280,
    0x3392c0,
    0x3392ff,
    0x33b600,
    0x33b640,
    0x33b680,
    0x33b6c0,
    0x33b6ff,
    0x33db00,
    0x33db40,
    0x33db80,
    0x33dbc0,
    0x33dbff,
    0x33ff00,
    0x33ff40,
    0x33ff80,
    0x33ffc0,
    0x33ffff,
    0x660000,
    0x660040,
    0x660080,
    0x6600c0,
    0x6600ff,
    0x662400,
    0x662440,
    0x662480,
    0x6624c0,
    0x6624ff,
    0x664900,
    0x664940,
    0x664980,
    0x6649c0,
    0x6649ff,
    0x666d00,
    0x666d40,
    0x666d80,
    0x666dc0,
    0x666dff,
    0x669200,
    0x669240,
    0x669280,
    0x6692c0,
    0x6692ff,
    0x66b600,
    0x66b640,
    0x66b680,
    0x66b6c0,
    0x66b6ff,
    0x66db00,
    0x66db40,
    0x66db80,
    0x66dbc0,
    0x66dbff,
    0x66ff00,
    0x66ff40,
    0x66ff80,
    0x66ffc0,
    0x66ffff,
    0x990000,
    0x990040,
    0x990080,
    0x9900c0,
    0x9900ff,
    0x992400,
    0x992440,
    0x992480,
    0x9924c0,
    0x9924ff,
    0x994900,
    0x994940,
    0x994980,
    0x9949c0,
    0x9949ff,
    0x996d00,
    0x996d40,
    0x996d80,
    0x996dc0,
    0x996dff,
    0x999200,
    0x999240,
    0x999280,
    0x9992c0,
    0x9992ff,
    0x99b600,
    0x99b640,
    0x99b680,
    0x99b6c0,
    0x99b6ff,
    0x99db00,
    0x99db40,
    0x99db80,
    0x99dbc0,
    0x99dbff,
    0x99ff00,
    0x99ff40,
    0x99ff80,
    0x99ffc0,
    0x99ffff,
    0xcc0000,
    0xcc0040,
    0xcc0080,
    0xcc00c0,
    0xcc00ff,
    0xcc2400,
    0xcc2440,
    0xcc2480,
    0xcc24c0,
    0xcc24ff,
    0xcc4900,
    0xcc4940,
    0xcc4980,
    0xcc49c0,
    0xcc49ff,
    0xcc6d00,
    0xcc6d40,
    0xcc6d80,
    0xcc6dc0,
    0xcc6dff,
    0xcc9200,
    0xcc9240,
    0xcc9280,
    0xcc92c0,
    0xcc92ff,
    0xccb600,
    0xccb640,
    0xccb680,
    0xccb6c0,
    0xccb6ff,
    0xccdb00,
    0xccdb40,
    0xccdb80,
    0xccdbc0,
    0xccdbff,
    0xccff00,
    0xccff40,
    0xccff80,
    0xccffc0,
    0xccffff,
    0xff0000,
    0xff0040,
    0xff0080,
    0xff00c0,
    0xff00ff,
    0xff2400,
    0xff2440,
    0xff2480,
    0xff24c0,
    0xff24ff,
    0xff4900,
    0xff4940,
    0xff4980,
    0xff49c0,
    0xff49ff,
    0xff6d00,
    0xff6d40,
    0xff6d80,
    0xff6dc0,
    0xff6dff,
    0xff9200,
    0xff9240,
    0xff9280,
    0xff92c0,
    0xff92ff,
    0xffb600,
    0xffb640,
    0xffb680,
    0xffb6c0,
    0xffb6ff,
    0xffdb00,
    0xffdb40,
    0xffdb80,
    0xffdbc0,
    0xffdbff,
    0xffff00,
    0xffff40,
    0xffff80,
    0xffffc0,
    0xffffff,
    0x000000,
    0x111111,
    0x222222,
    0x333333,
    0x444444,
    0x555555,
    0x666666,
    0x777777,
    0x888888,
    0x999999,
    0xaaaaaa,
    0xbbbbbb,
    0xcccccc,
    0xdddddd,
    0xeeeeee,
    0xffffff,
};

noinline fn getClr(self: *const HAL.Console.FBInfo, c: u8) usize {
    _ = self;
    return colorLookupTable[@intCast(usize, c)];
}

noinline fn setPixels(self: *const HAL.Console.FBInfo, x: isize, y: isize, w: usize, h: usize, c: usize) void {
    var i: isize = y;
    while (i < (y + @intCast(isize, h))) : (i += 1) {
        if (i < 0) {
            continue;
        } else if (i >= self.width) {
            return;
        }
        var j: isize = x;
        while (j < (x + @intCast(isize, w))) : (j += 1) {
            if (j < 0) {
                continue;
            } else if (i >= self.width) {
                break;
            }
            @ptrCast([*]u32, @alignCast(4, self.ptr))[(@intCast(usize, i) * self.width) + @intCast(usize, j)] = @intCast(u32, c);
        }
    }
}

pub fn init() void {
    if (fb_request.response) |response| {
        for (response.framebuffers()) |fb| {
            const info = HAL.Console.FBInfo{
                .ptr = @ptrCast(*allowzero void, fb.address + 0),
                .width = @intCast(usize, fb.width),
                .height = @intCast(usize, fb.height),
                .pitch = @intCast(usize, fb.pitch),
                .bpp = @intCast(usize, fb.bpp),
                .nativeColor = &getClr,
                .set = &setPixels,
            };
            HAL.Console.Init(&info);
            return;
        }
    }
}
